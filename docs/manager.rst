Manager
====================

.. currentmodule:: pyglet_gui.manager

In Pyglet-gui, each independent GUI is a :class:`pyglet_gui.manager.Manager`,
a subclass of both :class:`pyglet_gui.manager.ViewerManager` and :class:`pyglet_gui.manager.ControllerManager`.

This section provides the relevant references for understanding how :class:`pyglet_gui.manager.Manager` works
and how you can use it.

This section is most complex of this documentation because it glues all different APIs together.
The references of the classes are themselves divided in APIs, so it is easier for you to understand them.


ViewerManagerGroup
^^^^^^^^^^^^^^^^^^

Because each manager is independent of each other, it makes sense to draw them in different vertex groups
to know which one is drawn on top. :class:`ViewerManagerGroup` is used for that:

.. class:: ViewerManagerGroup

    A viewer manager group is a Pyglet's ordered group, i.e. a drawing group that preserves ordering.

    To define a order, this class has a class attribute

    This group uses a a distinct order, :attr:`own_order`, to distinguish itself from other Pyglet's Ordered groups.

    .. attribute:: own_order

        The same value as :attr:`order` used for comparisons between ViewerManagerGroup.

    To this, it defines __eq__, __lt__ and __hash__ that compare against ViewerManagerGroup using :attr:`own_order`
    and against other ordered groups using :attr:`order`.

    To send this group to the top, you call :meth:`pop_to_top`:

     .. method:: pop_to_top

        Sets :attr:`own_order` to the highest value amongst all instances of ViewerManagerGroup, ensuring
        the particular instance becomes the top on the group.

     .. method:: is_on_top

        Returns true if the particular instance is on top amongst all instances of ViewerManagerGroup.


ViewerManager
---------------

.. class:: ViewerManager

    Like the name suggests, ViewerManager is a manager of :class:`Viewers <pyglet_gui.core.Viewer>`.
    A ViewerManager is a subclass of :class:`pyglet_gui.containers.Wrapper` that exposes important features
    of Pyglet-gui.

    .. important:: Understanding this class is a pre-requisite to understand :class:`pyglet_gui.manager.Manager`.

    Because it is a container, it is part of the tree structure used by Pyglet-gui to draw viewers. However,
    this container is special in the sense that it does not have a parent, and thus it only :meth:`pyglet_gui.core.reset_size`
    with reset_parent=False, i.e. it only uses the top-down drawing.

    One consequence of this is that it has no one to set its position, and thus its position is set by itself,
    from the position computed from :meth:`get_position`.

    Moreover, because it is the root of the tree, it is the one to store and expose attributes required for
    drawing. They are the :class:`pyglet_gui.theme.Theme`, the Batch and batch groups.

    .. attribute:: theme

        The :class:`pyglet_gui.theme.Theme` of this manager. A read-only property defined in the initialization.

        One theme can be shared among ViewerManagers.

    .. attribute:: batch

        The Batch of the manager. A read-only property defined in the initialization.

        If no batch is provided in initialization, this Manager defines its own batch and exposes it draw() method.

        A Pyglet Batch can be shared among ViewerManagers and is exposed by each
        viewer by the method :meth:`pyglet_gui.core.Viewer.get_batch`.

    Pyglet's batch API uses groups and Pyglet-gui Theme API takes advantage of these. When a particular element of the
    theme is assigned to the batch, it must define which group it belongs to, e.g. for drawing in the right order.
    The ViewerManager is responsible for defining such groups to its viewers.

    The first group required is one for the ViewerManager itself, such that different ViewerManagers can
    be drawn in the same window. This is implemented in the :attr:`root_group`:

    .. attribute:: root_group

        A :class:`ViewerManagerGroup` used by ViewerManagers to decide which manager is on top
        of each other (on drawing). It is exposed as a read-only property.

    Because there can be several managers on the same window, the viewer implements the method :meth:`pop_to_top`:

    .. method:: pop_to_top

        Pops this manager to the top, both in handling window events and drawing in the batch.

    For its viewers, the manager has 4 default sub-groups exposed by the attribute group:

    .. attribute:: group

        A dictionary of 4 key-strings 'panel', 'background', 'foreground', 'highlight'
        mapping to 4 pyglet.graphics.OrderedGroup with orders 10, 20, 30 and 40 respectively.

        When a graphic element is generated by the Viewer, the viewer has to decide which group to use to that element.
        This property is exposed in each viewer by the method :meth:`pyglet_gui.core.Viewer.get_batch`.

    .. attribute:: window

        A Pyglet window where ViewerManagers lives, exposed as a property.

        The manager uses Pyglet's window to know where it has to be positioned, and to assign itself as an handler.

        This property has write permission to assign another window to the manager.

    .. method:: get_position

        Computes and returns its position (x, y) on the window.

        Used with :meth:`pyglet_gui.core.Viewer.set_position` to set the position of this manager in the window.

ControllerManager
------------------

.. class::ControllerManager

    A controller manager is the class responsible for
    managing Pyglet-gui :class:`Controllers <pyglet_gui.core.Controller>`.

    It has a list of controllers assigned to him and is responsible for
    calling its handlers.

    .. attribute:: controllers

        The list of controllers assigned to him. Exposed by a read-only property.

    .. method:: add_controller

        Appends the controller to :attr:`controllers`.

    .. method:: remove_controller

        Removes the controller from :attr:`controllers`.

    This manager assumes the user is only interested in using one controller at the time.
    It tracks down the mouse position on the window and tests when the mouse entered in a controller bounding box, saving
    that controller as the "hovering" controller.

    When the mouse is pressed, the "hovering" controller also becomes the "focus" controller.
    These must be unique within a manager because Pyglet-gui :class:`~pyglet_gui.containers.Container` don't
    overlap viewers.

    The class exposes two methods for this behaviour:

    .. method:: set_focus

        Sets the controller to be the focus of the manager.
        If controllers have the method, it calls on_lose_focus and on_gain_focus
        of the old focus and new focus respectively.

    .. method:: set_hover

        Sets the controller to be the hover of the manager.
        If controllers have the method, it calls on_lose_highlight and on_gain_highlight
        of the old hover and new hover respectively.

    The focus controller is the only controller to receive keystrokes and other events.

    In this manager, the keystroke TAB and SHIFT+TAB are handled to navigate (to the front
    and to the back) in the list of controllers, to give focus to them. This is useful for keyboard driven GUIs.

    This manager has two other special controllers, the "wheel target" and
    "wheel hint" (in case wheel target don't handle the event), used to handle mouse wheel events.
    This is useful when you want to set a scrollbar to receive a wheel without requiring the user
    to click on it to "focus it".

    .. method:: set_wheel_target

        Sets the wheel target to be the controller. It has to have implemented the method on_mouse_scroll.

    .. method:: set_wheel_hint

        Sets the wheel hint to be the controller. It has to have implemented the method on_mouse_scroll.

Manager (TODO)
---------------
